{"version":3,"file":"popup/index.js","mappings":"mBAOA,IAAYA,GAAZ,SAAYA,GACV,mCACA,iCACA,gCACD,CAJD,CAAYA,IAAAA,EAAkB,K,0SCL9B,MAAMC,EAAWC,SAASC,cAAc,aAQxCF,EAASG,iBAAiB,SAAUC,IAClCJ,EAASK,UAAUC,OAAO,OAAO,IAInCL,SAASE,iBAAiB,SAAUC,IAC7BJ,EAASO,SAASH,EAAEI,SACvBR,EAASK,UAAUI,OAAO,OAC5B,IAGFR,SAASS,eAAe,kBAAkBP,iBAAiB,SAAS,IAAY,OAAD,6BAC7E,MAAMQ,QAAaC,QAAQD,KAAKE,MAAM,CAAEC,QAAQ,EAAMC,eAAe,KAKvE,SAAsBC,EAAcC,GAClC,MAAMC,EAAO,IAAIC,KAAK,CAACF,GAAU,CAAEG,KAAM,eACnCC,EAAOpB,SAASqB,cAAc,KACpCD,EAAKE,KAAOC,IAAIC,gBAAgBP,GAChCG,EAAKK,SAPQ,WAQbL,EAAKM,QACLH,IAAII,gBAAgBP,EAAKE,KAC3B,CAVEM,CAAa,QADUjB,QAAQD,KAAKmB,YAAYnB,EAAK,GAAGoB,GAAI,CAAEX,KAAMrB,EAAmBiC,QAEzF,MAWA,W,yCACE,IACE,MAAMrB,QAAaC,QAAQD,KAAKE,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAErE,aADuBH,QAAQD,KAAKmB,YAAYnB,EAAK,GAAGoB,GAAI,CAAEX,KAAMrB,EAAmBkC,UACnElC,EAAmBmC,IACzC,CAAE,MAAO9B,GACP,OAAO,CACT,CACF,G,CAEA+B,GAAkBC,MAAMC,IACtBC,QAAQC,IAAIF,GACRA,GA5CJrC,EAASK,UAAUI,OAAO,SA4CJ,G","sources":["webpack://canvas-quiz-loader/./src/interfaces/message.interface.ts","webpack://canvas-quiz-loader/./src/popup/index.ts"],"sourcesContent":["const prefix = 'canvas-quiz-loader'\r\n\r\nexport interface BrowserMessage {\r\n  type: BrowserMessageType,\r\n  message?: any\r\n}\r\n\r\nexport enum BrowserMessageType {\r\n  DEBUG = `${prefix}-debug`,\r\n  PING = `${prefix}-ping`,\r\n  PONG = `${prefix}-pong`,\r\n}","import { BrowserMessageType } from '../interfaces/message.interface'\r\n\r\nconst dropdown = document.querySelector('.dropdown')\r\nfunction showGear() {\r\n  dropdown.classList.remove('hidden')\r\n}\r\n\r\nfunction hideGear() {\r\n  dropdown.classList.add('hidden')\r\n}\r\ndropdown.addEventListener('click', (e) => {\r\n  dropdown.classList.toggle('open')\r\n})\r\n\r\n// Close dropdown if clicked outside\r\ndocument.addEventListener('click', (e) => {\r\n  if (!dropdown.contains(e.target as HTMLElement)) {\r\n    dropdown.classList.remove('open')\r\n  }\r\n})\r\n\r\ndocument.getElementById('download-debug').addEventListener('click', async () => {\r\n  const tabs = await browser.tabs.query({ active: true, currentWindow: true })\r\n  const response = await browser.tabs.sendMessage(tabs[0].id, { type: BrowserMessageType.DEBUG })\r\n  downloadFile('logs.txt', response)\r\n})\r\n\r\nfunction downloadFile(name: string, content: string): void {\r\n  const blob = new Blob([content], { type: 'text/plain' })\r\n  const link = document.createElement('a')\r\n  link.href = URL.createObjectURL(blob)\r\n  link.download = name\r\n  link.click()\r\n  URL.revokeObjectURL(link.href)\r\n}\r\n\r\nasync function isExtensionOpen(): Promise<boolean> {\r\n  try {\r\n    const tabs = await browser.tabs.query({ active: true, currentWindow: true })\r\n    const response = await browser.tabs.sendMessage(tabs[0].id, { type: BrowserMessageType.PING })\r\n    return response === BrowserMessageType.PONG\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nisExtensionOpen().then((result) => {\r\n  console.log(result)\r\n  if (result) showGear()\r\n})\r\n"],"names":["BrowserMessageType","dropdown","document","querySelector","addEventListener","e","classList","toggle","contains","target","remove","getElementById","tabs","browser","query","active","currentWindow","name","content","blob","Blob","type","link","createElement","href","URL","createObjectURL","download","click","revokeObjectURL","downloadFile","sendMessage","id","DEBUG","PING","PONG","isExtensionOpen","then","result","console","log"],"sourceRoot":""}